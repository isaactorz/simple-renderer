#version 330 core

in vec3 pos_worldspace;
in vec3 norm_cameraspace;
in vec3 eye_cameraspace;
in vec3 lightdir_cameraspace;
//in vec3 vert_color;

out vec3 color;

uniform mat4 MV;
uniform vec3 lightpos_worldspace;

void main()
{	
        vec3 light_color = vec3(1,1,1);
        float light_power = 100.0f;

        vec3 mat_diffuse = vec3(1.0,0.8,0.0);
        vec3 mat_ambient = vec3(0.2,0.2,0.2) * mat_diffuse;
        vec3 mat_specular = vec3(1.0,1.0,1.0);

        float distance = length(lightpos_worldspace - pos_worldspace);

        vec3 n = normalize(norm_cameraspace);

        vec3 l = normalize(lightdir_cameraspace);

        float cos_theta = clamp( dot(n,l), 0, 1);
        
        vec3 E  = normalize(eye_cameraspace);

        vec3 R = reflect(-l,n);

        float cosAlpha = clamp( dot(E,R), 0, 1);

        color =

                mat_ambient +
                
                mat_diffuse * light_color * light_power * cos_theta / (distance * distance) +

                mat_specular * light_color * light_power * pow(cosAlpha, 5) / (distance * distance);

} 
